/* Copyright (C) 2014, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */


namespace com.ibm.streamsx.hbase.sample;
use com.ibm.streamsx.hbase::HBASEPut;
use com.ibm.streamsx.hbase::HBASEGet;

composite CheckTest  {
param
operator $TupleProducer;
type $EntryType;
type $RowType;
type $CheckType;
function $getColumnQualifier;
expression<rstring> $tableName: "streamsSample_typeTest";
expression<float64> $putDelay: 10.0;
expression<float64> $readDelay: 10.0;
graph

stream<$EntryType> entryStream = $TupleProducer() {
param initDelay: $putDelay;
}

(stream<tuple<$RowType row>,tuple<$CheckType checkTuple,rstring value>,tuple<rstring colF, rstring colQ>> putStream;
stream<tuple<$RowType row>, tuple<rstring colF, rstring colQ>> getStream)  = Functor(entryStream) {

output putStream: 
	row = row,
	colQ = "check_test"+(rstring)$getColumnQualifier(entryStream),
	value = ".",
	checkTuple = {columnQualifier = entryStream.colQ,
	columnFamily = entryStream.colF,
	value=entryStream.value
	};
	getStream:
	row = row,
	colQ = "check_test"+(rstring)$getColumnQualifier(entryStream);
	}

stream<boolean success>  resultStream = HBASEPut(putStream) {
param
tableName: $tableName;
checkAttrName: "checkTuple";
columnFamilyAttrName: "colF";
columnQualifierAttrName: "colQ";
rowAttrName: "row";
valueAttrName: "value";
successAttr: "success";
}

stream<tuple<$RowType row>, tuple<rstring colF, rstring colQ>> delayed = Delay(getStream) {
param 
delay: $readDelay;
}

stream<tuple<$RowType row>, tuple<rstring colF, rstring colQ,rstring value>> getResults = HBASEGet(delayed) {
param 
tableName: $tableName;
columnFamilyAttrName: "colF";
columnQualifierAttrName: "colQ";
outAttrName: "value";
rowAttrName: "row";
}

() as sink1 = FileSink(resultStream) {
param file: "putResults.txt";
}

() as sink2 = FileSink(getResults) {
param file: "getOutput.txt";
}

() as sink = Custom(resultStream; getResults) {
logic state:
{
mutable int32 numSuccess = 0;
}
onTuple resultStream:
if (success) {
numSuccess++;
}
onPunct resultStream: {
	mutable int64 value =-1;
	getInputPortMetricValue(0u, Sys.nTuplesProcessed, value);
	assert( (int32)value == numSuccess);
}
onTuple getResults:
	assert(getResults.value == ".");
	onPunct getResults: {
	if (currentPunct() == Sys.FinalMarker) {
	mutable int64 streamOne =-1;
	mutable int64 streamTwo = -1;
	getInputPortMetricValue(0u, Sys.nTuplesProcessed, streamOne);
		getInputPortMetricValue(1u, Sys.nTuplesProcessed, streamTwo);
		assert(streamOne == streamTwo);
		println("Check test complete. "+(rstring)streamOne+" tuples evaluated");
	}
	}
}

}

